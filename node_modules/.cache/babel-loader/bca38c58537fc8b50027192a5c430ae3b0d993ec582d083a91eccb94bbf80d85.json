{"ast":null,"code":"var _jsxFileName = \"/Users/yardennaokun/Documents/Gokstad Akademiet/React/arbeidskrav-1-react-ordspill/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport autumnList from \"./data/Høst.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const words = autumnList.ord;\n  function getRandomWord(wordList) {\n    const index = Math.floor(Math.random() * wordList.length);\n    return wordList[index];\n  }\n  const [inputValue, setInputValue] = useState(\"\");\n  const [randomWord, setRandomWord] = useState(getRandomWord(words));\n  const [indexWord, setIndexWord] = useState(0);\n  const [score, setScore] = useState(0);\n  const [remainingWords, setRemainingWords] = useState([...words]); // Create a copy of the word list\n\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  useEffect(() => {\n    // Check if inputValue and randomWord have characters at indexWord\n    if (inputValue[indexWord] && randomWord[indexWord]) {\n      if (inputValue[indexWord] === randomWord[indexWord]) {\n        // If characters match, increment the score by 1\n        setScore(prevScore => prevScore + 1);\n      } else {\n        // If characters do not match, decrement the score by 1\n        setScore(prevScore => prevScore - 1);\n      }\n\n      // Increment indexWord\n      setIndexWord(lastIndex => lastIndex + 1);\n\n      // If we've reached the end of the randomWord, get a new random word\n      if (indexWord >= randomWord.length - 1) {\n        // Remove the current randomWord from the remainingWords list\n        const updatedRemainingWords = remainingWords.filter(word => word !== randomWord);\n\n        // Check if there are remaining words to select from\n        if (updatedRemainingWords.length > 0) {\n          setRemainingWords(updatedRemainingWords);\n          setRandomWord(getRandomWord(updatedRemainingWords));\n          setIndexWord(0); // Reset indexWord\n        } else {\n          // No more words remaining, reset the game or handle as needed\n          alert(\"No more words remaining!\");\n          // You can add logic to reset the game here if needed.\n        }\n      }\n    }\n  }, [inputValue, randomWord, indexWord, remainingWords]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Random Word: \", randomWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 59,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"wwU2Ff6dhAbLMzfPKcz7IcoEcBM=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","autumnList","jsxDEV","_jsxDEV","App","_s","words","ord","getRandomWord","wordList","index","Math","floor","random","length","inputValue","setInputValue","randomWord","setRandomWord","indexWord","setIndexWord","score","setScore","remainingWords","setRemainingWords","handleInputChange","event","target","value","prevScore","lastIndex","updatedRemainingWords","filter","word","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/Users/yardennaokun/Documents/Gokstad Akademiet/React/arbeidskrav-1-react-ordspill/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport autumnList from \"./data/Høst.json\";\n\nconst App = () => {\n  const words = autumnList.ord;\n\n  function getRandomWord(wordList) {\n    const index = Math.floor(Math.random() * wordList.length);\n    return wordList[index];\n  }\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [randomWord, setRandomWord] = useState(getRandomWord(words));\n  const [indexWord, setIndexWord] = useState(0);\n  const [score, setScore] = useState(0);\n  const [remainingWords, setRemainingWords] = useState([...words]); // Create a copy of the word list\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  useEffect(() => {\n    // Check if inputValue and randomWord have characters at indexWord\n    if (inputValue[indexWord] && randomWord[indexWord]) {\n      if (inputValue[indexWord] === randomWord[indexWord]) {\n        // If characters match, increment the score by 1\n        setScore((prevScore) => prevScore + 1);\n      } else {\n        // If characters do not match, decrement the score by 1\n        setScore((prevScore) => prevScore - 1);\n      }\n\n      // Increment indexWord\n      setIndexWord((lastIndex) => lastIndex + 1);\n\n      // If we've reached the end of the randomWord, get a new random word\n      if (indexWord >= randomWord.length - 1) {\n        // Remove the current randomWord from the remainingWords list\n        const updatedRemainingWords = remainingWords.filter(\n          (word) => word !== randomWord\n        );\n\n        // Check if there are remaining words to select from\n        if (updatedRemainingWords.length > 0) {\n          setRemainingWords(updatedRemainingWords);\n          setRandomWord(getRandomWord(updatedRemainingWords));\n          setIndexWord(0); // Reset indexWord\n        } else {\n          // No more words remaining, reset the game or handle as needed\n          alert(\"No more words remaining!\");\n          // You can add logic to reset the game here if needed.\n        }\n      }\n    }\n  }, [inputValue, randomWord, indexWord, remainingWords]);\n\n  return (\n    <div>\n      <h1>Random Word: {randomWord}</h1>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n\n      <p>Score: {score}</p>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}