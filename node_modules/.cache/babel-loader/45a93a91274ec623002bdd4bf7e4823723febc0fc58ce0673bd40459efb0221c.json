{"ast":null,"code":"var _jsxFileName = \"/Users/yardennaokun/Documents/Gokstad Akademiet/React/arbeidskrav-1-react-ordspill/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport autumnList from \"./data/Høst.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const words = autumnList.ord;\n  function getRandomWord(wordList) {\n    const index = Math.floor(Math.random() * wordList.length);\n    return wordList[index];\n  }\n  const [inputValue, setInputValue] = useState(\"\");\n  const [randomWord, setRandomWord] = useState(\"\");\n  const [indexWord, setIndexWord] = useState(0);\n  const [score, setScore] = useState(0);\n  const [remainingWords, setRemainingWords] = useState([...words]);\n  const [deductions, setDeductions] = useState(0);\n  const [consecutiveCorrectWords, setConsecutiveCorrectWords] = useState(0); // New state\n\n  const handleInputChange = event => {\n    setInputValue(event.target.value);\n  };\n  const handleNewWord = correct => {\n    if (correct) {\n      setConsecutiveCorrectWords(prev => prev + 1); // Increment for a correct word\n      if (consecutiveCorrectWords + 1 === 3) {\n        setScore(prevScore => prevScore + 100); // Add 100 points for every third consecutive correct word\n        setConsecutiveCorrectWords(0); // Reset the count\n      }\n    } else {\n      setConsecutiveCorrectWords(0); // Reset if the word was not typed correctly\n    }\n\n    if (remainingWords.length > 1) {\n      const updatedRemainingWords = remainingWords.filter(word => word !== randomWord);\n      setRemainingWords(updatedRemainingWords);\n      setRandomWord(getRandomWord(updatedRemainingWords));\n      setIndexWord(0);\n      setDeductions(0);\n    } else {\n      alert(\"No more words remaining!\");\n    }\n  };\n  useEffect(() => {\n    setScore(0);\n  }, []);\n  useEffect(() => {\n    if (inputValue[indexWord] && randomWord[indexWord]) {\n      if (inputValue[indexWord] === randomWord[indexWord]) {\n        setScore(prevScore => prevScore + 1);\n      } else {\n        if (deductions < 5) {\n          setScore(prevScore => prevScore - 1);\n          setDeductions(prevDeductions => prevDeductions + 1);\n        }\n      }\n      setIndexWord(lastIndex => lastIndex + 1);\n\n      // Check if the user has correctly typed the entire word\n      if (inputValue === randomWord && indexWord === randomWord.length - 1) {\n        setScore(prevScore => prevScore + 50); // Add 50 points for the correct word ending\n        handleNewWord(true); // Indicate that the word was correctly typed\n        setInputValue(\"\");\n      } else if (indexWord >= randomWord.length - 1) {\n        handleNewWord(false); // Indicate that the word was not typed correctly\n        setInputValue(\"\");\n      }\n    }\n  }, [inputValue, randomWord, indexWord, remainingWords, deductions]);\n  useEffect(() => {\n    setRandomWord(getRandomWord(remainingWords));\n    setIndexWord(0);\n    setInputValue(\"\");\n    setDeductions(0);\n  }, [remainingWords]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"center-content\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Skriv ordet: \", randomWord]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputValue,\n      onChange: handleInputChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Poengscore: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 87,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"cTwelbP62LHt0txAoiOKZoAAPqI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","autumnList","jsxDEV","_jsxDEV","App","_s","words","ord","getRandomWord","wordList","index","Math","floor","random","length","inputValue","setInputValue","randomWord","setRandomWord","indexWord","setIndexWord","score","setScore","remainingWords","setRemainingWords","deductions","setDeductions","consecutiveCorrectWords","setConsecutiveCorrectWords","handleInputChange","event","target","value","handleNewWord","correct","prev","prevScore","updatedRemainingWords","filter","word","alert","prevDeductions","lastIndex","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","onChange","_c","$RefreshReg$"],"sources":["/Users/yardennaokun/Documents/Gokstad Akademiet/React/arbeidskrav-1-react-ordspill/src/App.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport autumnList from \"./data/Høst.json\";\n\nconst App = () => {\n  const words = autumnList.ord;\n\n  function getRandomWord(wordList) {\n    const index = Math.floor(Math.random() * wordList.length);\n    return wordList[index];\n  }\n\n  const [inputValue, setInputValue] = useState(\"\");\n  const [randomWord, setRandomWord] = useState(\"\");\n  const [indexWord, setIndexWord] = useState(0);\n  const [score, setScore] = useState(0);\n  const [remainingWords, setRemainingWords] = useState([...words]);\n  const [deductions, setDeductions] = useState(0);\n  const [consecutiveCorrectWords, setConsecutiveCorrectWords] = useState(0);  // New state\n\n  const handleInputChange = (event) => {\n    setInputValue(event.target.value);\n  };\n\n  const handleNewWord = (correct) => {\n    if (correct) {\n      setConsecutiveCorrectWords(prev => prev + 1); // Increment for a correct word\n      if (consecutiveCorrectWords + 1 === 3) {\n        setScore(prevScore => prevScore + 100); // Add 100 points for every third consecutive correct word\n        setConsecutiveCorrectWords(0); // Reset the count\n      }\n    } else {\n      setConsecutiveCorrectWords(0); // Reset if the word was not typed correctly\n    }\n\n    if (remainingWords.length > 1) {\n      const updatedRemainingWords = remainingWords.filter(\n        (word) => word !== randomWord\n      );\n      setRemainingWords(updatedRemainingWords);\n      setRandomWord(getRandomWord(updatedRemainingWords));\n      setIndexWord(0);\n      setDeductions(0);\n    } else {\n      alert(\"No more words remaining!\");\n    }\n  };\n\n  useEffect(() => {\n    setScore(0);\n  }, []);\n\n  useEffect(() => {\n    if (inputValue[indexWord] && randomWord[indexWord]) {\n      if (inputValue[indexWord] === randomWord[indexWord]) {\n        setScore((prevScore) => prevScore + 1);\n      } else {\n        if (deductions < 5) {\n          setScore((prevScore) => prevScore - 1);\n          setDeductions((prevDeductions) => prevDeductions + 1);\n        }\n      }\n\n      setIndexWord((lastIndex) => lastIndex + 1);\n\n      // Check if the user has correctly typed the entire word\n      if (inputValue === randomWord && indexWord === randomWord.length - 1) {\n        setScore((prevScore) => prevScore + 50); // Add 50 points for the correct word ending\n        handleNewWord(true); // Indicate that the word was correctly typed\n        setInputValue(\"\");\n      } else if (indexWord >= randomWord.length - 1) {\n        handleNewWord(false); // Indicate that the word was not typed correctly\n        setInputValue(\"\");\n      }\n\n    }\n  }, [inputValue, randomWord, indexWord, remainingWords, deductions]);\n\n  useEffect(() => {\n    setRandomWord(getRandomWord(remainingWords));\n    setIndexWord(0);\n    setInputValue(\"\");\n    setDeductions(0);\n  }, [remainingWords]);\n\n  return (\n    <div className=\"center-content\">\n      <h1>Skriv ordet: {randomWord}</h1>\n      <input type=\"text\" value={inputValue} onChange={handleInputChange} />\n      <p>Poengscore: {score}</p>\n    </div>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}